@page "/login"
@using Data;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Service.ECommerce14AService service
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<div class="login-frame">
    <div class="col-12 row">
        <div style="margin-left: 50px; height: 50%">
            <br /><br /><br /><br />
            <img src="/resources/logo.png" height="300" width="300" alt="cart">
        </div>

        <div class="vertical-line"></div>

        <EditForm Model="@user" OnValidSubmit="@ValidateUser">
            <div>
                <br /><br /><br /><br /><br />
            </div>
            <div>
                <h3 style="font-weight:bold; color:purple">eCommerce 14A</h3>
            </div>
            <div>
                <br />
            </div>
            <div class="col-12 row">
                <input class="form-control col-12" @bind="user.Username" placeholder="Username" />
            </div>
            <br />
            <div class="col-12 row">
                <input type="password" class="form-control col-12" @bind="user.Password" placeholder="password" />
            </div>
            <br />
            <div class="col-12 row">
                <span class="col-12"></span>
                <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
                <a href="/register" class="register-btn">Register</a>
            </div>
            <br />
            <div class="login-msg" style="text-align:left; font-weight:bold">
                <span >@LoginMesssage</span>
            </div>
        </EditForm>
    </div>
</div>



@code {

    public Client.Data.User user { get; set; }
    public string LoginMesssage { get; set; }

    protected override void OnInitialized()
    {
        user = new User();
    }

    private async void ValidateUser()
    {
        Dictionary<int, int[]> Permissions = await service.Login(user);

        if (Permissions != null)
        {
            ((MyAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticateUser(user, Permissions);
            NavigationManager.NavigateTo("/");

            //store user's session
            await sessionStorage.SetItemAsync("user", user);
        }
        else
        {
            LoginMesssage = "Invalid username and/or password";
        }


    }

}
