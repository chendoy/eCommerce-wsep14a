@page "/ManageStore/{storeid:int}"
@using Server.UserComponent.DomainLayer

<h1>Store Dashboard</h1>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Staff">
            <h2>Staff</h2>

            <div class="grid-container">

                @if (staffList != null)
                {
                    @foreach (KeyValuePair<string, string> employee in staffList)
                    {
                        <RadzenCard Style="width:400px; margin-bottom: 20px; ">
                            <div class="row">
                                <div class="col-md-6">
                                    <div style="margin-top:20px">Employee:</div>
                                    <b>@employee.Key</b>
                                    <br />
                                    <RadzenImage Path="" Style="width:100px;" />
                                </div>
                                <div class="col-md-6">
                                    <div style="margin-top:20px">Role:</div>
                                    <b>@employee.Value</b>
                                </div>
                            </div>
                        </RadzenCard>
                    }
                }
            </div>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Promote or Demote">

            <div>
                <br />
                <h2>Promote or demote users</h2>
                <br />
                <Dropdown TItem="string" OnSelected="@OnSelected1">
                    <InitialTip>Action</InitialTip>
                    <ChildContent>
                        @foreach (var option in options)
                        {
                            <DropdownListItem Item="@option">@option</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>

                <Dropdown TItem="string" OnSelected="@OnSelected2">
                    <InitialTip>User</InitialTip>
                    <ChildContent>
                        @foreach (var user in registeredUsers)
                        {
                            <DropdownListItem Item="@user">@user</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>

                <h5 style="display: inline">to be &nbsp &nbsp </h5>

                <Dropdown TItem="string" OnSelected="@OnSelected3">
                    <InitialTip>New Role</InitialTip>
                    <ChildContent>
                        @foreach (var role in roles)
                        {
                            <DropdownListItem Item="@role">@role</DropdownListItem>
                        }
                    </ChildContent>
                </Dropdown>

                <br /><br />
                <button class="col-1 btn btn-primary" @onclick="(()=>ApplyAction())">Apply</button>

                <br /><br />
                <div class="login-msg" style="text-align:left; font-weight:bold">
                    <span>@AppointmentMessage</span>
                </div>

            </div>
            <br /><br />
            <ViewAppointRequest Username="@loggedInUser" StoreId="@StoreId" />

        </RadzenTabsItem>

        <RadzenTabsItem Text="Edit Permissions">

            <RadzenGrid @ref="permissionsGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                        Data="@ManagersPermissions" TItem="Tuple<string, Permission>">
                <Columns>
                    <RadzenGridColumn Width="100px" TItem="Tuple<string, Permission>" Property="Item1" Title="User Name" />
                    <RadzenGridColumn Width="100px" TItem="Tuple<string, Permission>" Title="View Puarchse History" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.ViewPuarchseHistory" Disabled="true" TValue="bool" />
                        </Template>
                        <EditTemplate Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.ViewPuarchseHistory" Disabled="false" TValue="bool" />
                        </EditTemplate>
                    </RadzenGridColumn>

                    <RadzenGridColumn Width="100px" TItem="Tuple<string, Permission>" Title="Edit Inventory" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.EditInventory" Disabled="true" TValue="bool" />
                        </Template>
                        <EditTemplate Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.EditInventory" Disabled="false" TValue="bool" />
                        </EditTemplate>
                    </RadzenGridColumn>

                    <RadzenGridColumn Width="100px" TItem="Tuple<string, Permission>" Title="Edit Discount Policy" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.EditDiscountPolicy" Disabled="true" TValue="bool" />
                        </Template>
                        <EditTemplate Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.EditDiscountPolicy" Disabled="false" TValue="bool" />
                        </EditTemplate>
                    </RadzenGridColumn>

                    <RadzenGridColumn Width="100px" TItem="Tuple<string, Permission>" Title="Edit Purachse Policy" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.EditPurachsePolicy" Disabled="true" TValue="bool" />
                        </Template>
                        <EditTemplate Context="permission">
                            <RadzenCheckBox @bind-Value="@permission.Item2.EditPurachsePolicy" Disabled="false" TValue="bool" />
                        </EditTemplate>
                    </RadzenGridColumn>

                    <RadzenGridColumn TItem="Tuple<string, Permission>" Context="permission" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                        <Template Context="permission">
                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow_Permission(permission))">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="permission">
                            <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow_Permission(permission))">
                            </RadzenButton>
                            <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit_Permission(permission))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenGridColumn>
                </Columns>

            </RadzenGrid>

            <div class="error-msg" style="text-align:left; font-weight:bold">
                <span>@errorMsg</span>
            </div>

            <div class="success-msg" style="text-align:left; font-weight:bold">
                <span>@successMsg</span>
            </div>

        </RadzenTabsItem>

        @if (service.Permissions[StoreId].EditDiscountPolicy)
        {
    <RadzenTabsItem Text="Discount Policy">

        <div class="row">
            <div class="col-md-8">
                <h2>Current discount policies in your store</h2>
                <RadzenListBox AllowFiltering="true" Change="@(args => Change(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="currentDiscounts" Data="@currentDiscounts" TextProperty="currentDiscounts" ValueProperty="" Style="margin-bottom: 20px; height:200px; width:1200px;" />
            </div>
        </div>

        <div class="row col-md-12">

            <div class="col-md-4">
                <h2>Available preconditions</h2>
                <RadzenListBox AllowFiltering="true" Change="@(args => Change(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="discountsWithId" Data="@discountsWithId" TextProperty="discountsWithId" ValueProperty="" Style="margin-bottom: 20px; height:200px; width:400px;" />

            </div>
            <div class="col-md-4">
                <h2>Available products</h2>
                <RadzenListBox AllowFiltering="true" Change="@(args => Change(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="products" Data="@products" TextProperty="products" ValueProperty="" Style="margin-bottom: 20px; height:200px; width:400px;" />
            </div>
            <div class="col-md-4">
                <h2>How formatting works?</h2>
                <RadzenCard Style="margin-bottom: 20px; height:200px; width:400px; overflow:scroll;">
                    <h4>Revealed Discount</h4>
                    <span>Revealed discounts are denoted by the term r:[discount%]:[product ID]</span>
                    <br />
                    <sapn>For example: r:2:20</sapn>
                    <hr>
                    <h4>Conditional Basket Discount</h4>
                    <span>Conditional basket discounts are denoted by the term cb:[pre condition]:[discount%]</span>
                    <br />
                    <sapn>For example: cb:3:20</sapn>
                    <hr>
                    <h4>Conditional Product Discount</h4>
                    <span>Conditional product discounts are denoted by the term cp:[Produt ID]:[pre condition]:[discount%]</span>
                    <br />
                    <sapn>For example: cb:3:20</sapn>
                    <hr>
                    <h4>Compound Discount</h4>
                    <span>Compound discount are denoted by the term (Opeator Child-Discount_1 ... Child-Discount_n)</span>
                    <br />
                    <span>i.e there should be parentheses around</span>
                    <br />
                    <span>Note the prefix operator!</span>
                    <br />
                    <span>child discoutns can be compund themselves, considier the following compound discount:</span>
                    <br />
                    <span>(AND (XOR (OR r:20:1 cb:1:10) r:30:2) (OR cp:1:2:30 cb:5:15))</span>

                </RadzenCard>
            </div>
        </div>

        <h2>Your new composite purchase policy goes here </h2>

        <div class="row">
            <div class="col-md-8">
                <RadzenTextArea Placeholder="Enter here..." Cols="70" Rows="3" Change="@(args => ChnageDiscountText(args))" Style="margin-bottom: 20px; font-size: 20px;" />
            </div>
                
                <div class="col-md-4">
                    <div class="row">
                        <RadzenButton Click="@((args) => ParseDiscountText(args))" Text="Submit" Style="margin-bottom: 20px; width: 150px" />
                    </div>
                    <div class="row">
                        <div class="error-msg" style="text-align:left; font-weight:bold">
                            <span>@errorMsg</span>
                        </div>

                        <div class="success-msg" style="text-align:left; font-weight:bold">
                            <span>@successMsg</span>
                        </div>
                    </div>
                </div>
        </div>

    </RadzenTabsItem>
        }

        @if (service.Permissions[StoreId].EditPurachsePolicy)
        {
    <RadzenTabsItem Text="Purchase Policy">
        <div class="row">
            <div class="col-md-8">
                <h2>Current purchase policies in your store</h2>
                <RadzenListBox AllowFiltering="true" Change="@(args => Change(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="currentDiscounts" Data="@currentDiscounts" TextProperty="currentDiscounts" ValueProperty="" Style="margin-bottom: 20px; height:200px; width:1200px;" />
            </div>
        </div>

        <div class="row col-md-12">

            <div class="col-md-4">
                <h2>Available preconditions</h2>
                <RadzenListBox AllowFiltering="true" Change="@(args => Change(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="policiesWithId" Data="@policiesWithId" TextProperty="policiesWithId" ValueProperty="" Style="margin-bottom: 20px; height:200px; width:400px;" />

            </div>
            <div class="col-md-4">
                <h2>Available products</h2>
                <RadzenListBox AllowFiltering="true" Change="@(args => Change(args))" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="products" Data="@products" TextProperty="products" ValueProperty="" Style="margin-bottom: 20px; height:200px; width:400px;" />
            </div>
            <div class="col-md-4">
                <h2>How formatting works?</h2>
                <RadzenCard Style="margin-bottom: 20px; height:200px; width:400px; overflow:scroll;">
                    <h4>Product Purchase Policy</h4>
                    <span>Product purchase policies are denoted by the term p:[precondition]:[productId]</span>
                    <br />
                    <sapn>For example: p:3:546</sapn>
                    <hr>
                    <h4>Basket Purchase Policy</h4>
                    <span>Basket purchase policies are denoted by the term b:[pre condition]</span>
                    <br />
                    <sapn>For example: b:6</sapn>
                    <hr>
                    <h4>System Purchase Policy</h4>
                    <span>System purchase policies are denoted by the term s:[precondition]:[storeID]</span>
                    <br />
                    <sapn>For example: s:3:41</sapn>
                    <hr>
                    <h4>User Purchase Policy</h4>
                    <span>User purchase policies are denoted by the term u:[precondition]</span>
                    <br />
                    <sapn>For example: s:3</sapn>
                    <hr>
                    <h4>Compund Purchase Policy</h4>
                    <span>Compound purchase policies are denoted by the term (Opeator Child_Policy_1 ... Child_Policy_n)</span>
                    <br />
                    <span>i.e there should be parentheses around</span>
                    <br />
                    <span>Note the prefix operator!</span>
                    <br />
                    <span>children polcies can be compund themselves, considier the following compound policy:</span>
                    <br />
                    <span>(AND (XOR (OR b:1 p:2:3) s:1:1) (OR u:3:user1 u:2:user2))</span>
                </RadzenCard>
            </div>
        </div>

        <h2>Your new composite purchase policy goes here </h2>

        <div class="row">
            <div class="col-md-8">
                <RadzenTextArea Placeholder="Enter here..." Cols="70" Rows="3" Change="@(args => ChangePolicyText(args))" Style="margin-bottom: 20px; font-size: 20px;" />
            </div>

            <div class="col-md-4">
                <div class="row">
                    <RadzenButton Click="@((args) => ParsePolicyText(args))" Text="Submit" Style="margin-bottom: 20px; width: 150px" />
                </div>
                <div class="row">
                    <div class="error-msg" style="text-align:left; font-weight:bold">
                        <span>@errorMsg</span>
                    </div>

                    <div class="success-msg" style="text-align:left; font-weight:bold">
                        <span>@successMsg</span>
                    </div>
                </div>
            </div>
        </div>

    </RadzenTabsItem>
        }

        @if (service.Permissions[StoreId].ViewPuarchseHistory)
        {
            <RadzenTabsItem Text="Purchases">
                <StoreHistory Username="@loggedInUser" StoreId="StoreId" />
            </RadzenTabsItem>

        }

        @if (service.Permissions[StoreId].EditInventory)
        {
            <RadzenTabsItem Text="Products">

                <RadzenGrid @ref="productsGrid" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                            Data="@inventory" TItem="Tuple<ProductData, int>">
                    <Columns>
                        <RadzenGridColumn Width="100px" TItem="Tuple<ProductData, int>" Property="Item1.ProductId" Title="Product ID" />
                        <RadzenGridColumn Width="100px" TItem="Tuple<ProductData, int>" Property="Item1.Name" Title="Product Name">
                            <EditTemplate Context="product">
                                <RadzenTextBox @bind-Value="product.Item1.Name" Style="width:100%; display: block" Name="ProductName" />
                            </EditTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="100px" TItem="Tuple<ProductData, int>" Property="Item1.Category" Title="Category">
                            <EditTemplate Context="product">
                                <RadzenTextBox @bind-Value="product.Item1.Category" Style="width:100%; display: block" Name="Category" />
                            </EditTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="100px" TItem="Tuple<ProductData, int>" Property="Item1.Details" Title="Details">
                            <EditTemplate Context="product">
                                <RadzenTextBox @bind-Value="product.Item1.Details" Style="width:100%; display: block" Name="Details" />
                            </EditTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="100px" TItem="Tuple<ProductData, int>" Property="Item1.Price" Title="Price">
                            <EditTemplate Context="product">
                                <RadzenNumeric TValue="double" @bind-Value="product.Item1.Price" Style="width:100%; display: block" Name="Price" />
                            </EditTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn Width="100px" TItem="Tuple<ProductData, int>" Property="Item2" Title="Amount" />

                        <RadzenGridColumn TItem="Tuple<ProductData, int>" Context="product" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                            <Template Context="product">
                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(product))">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="product">
                                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(product))">
                                </RadzenButton>
                                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(product))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="Tuple<ProductData, int>" Context="product" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                            <Template Context="product">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(product))">
                                </RadzenButton>
                            </Template>
                            <EditTemplate Context="product">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(product))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenGridColumn>
                    </Columns>

                </RadzenGrid>

                <br /><br />

                <h2>Choose Product</h2>
                <RadzenDropDown AllowClear="true" TValue="int"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                Data="@inventory" TextProperty="Item1.Name" ValueProperty="Item1.ProductId" Style="margin-bottom: 20px" Change="@(args => SelectProduct(args))" />
                <br />

                @*<RadzenButton Click="@(() => DeleteProduct())" Text="Delete All" Style="margin-bottom: 20px; width: 150px" />

                    <br />*@

                <h2>Choose amount to increase/increase</h2>
                <RadzenNumeric TValue="int" Style="margin-bottom: 20px" Change="@(args => ChangeDelta(args))" />

                <br />

                <RadzenButton Click="@(() => Increase())" Icon="add" Style="margin-bottom: 20px; width: 80px" />

                <RadzenButton Click="@(() => Decrease())" Icon="remove" Style="margin-bottom: 20px; width: 80px" />


                <div class="error-msg" style="text-align:left; font-weight:bold">
                    <span>@errorMsg</span>
                </div>

                <div class="success-msg" style="text-align:left; font-weight:bold">
                    <span>@successMsg</span>
                </div>

            </RadzenTabsItem>

            <RadzenTabsItem Text="Add product">

                <RadzenTemplateForm Data="@product" Submit="@((Product args) => { AddProduct(args); })">
                    <div class="row">
                        <div class="col-md-6">
                            <RadzenFieldset Text="Product Info">

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="ID" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenNumeric @bind-Value="product.ProductId" style="width: 100%;" Name="Name" />
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Details" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox @bind-Value="product.ProductDetails" style="width: 100%;" Name="ProductDetails" />
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Price" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenNumeric @bind-Value="product.ProductPrice" style="width: 100%;" Name="Name" />
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Name" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox @bind-Value="product.ProductName" style="width: 100%;" Name="ProductName" />
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Category" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox @bind-Value="product.ProductCategory" style="width: 100%;" Name="ProductCategory" />
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Amount" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenNumeric @bind-Value="product.Pamount" style="width: 100%;" Name="Name" />
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-md-4 align-items-center d-flex">
                                        <RadzenLabel Text="Image URL" />
                                    </div>
                                    <div class="col-md-8">
                                        <RadzenTextBox @bind-Value="product.ImgUrl" style="width: 100%;" Name="ImgUrl" />
                                    </div>
                                </div>

                            </RadzenFieldset>

                        </div>
                    </div>



                    <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Add Product" />
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                        </div>
                    </div>
                </RadzenTemplateForm>

                <div class="error-msg" style="text-align:left; font-weight:bold">
                    <span>@errorMsg</span>
                </div>

                <div class="success-msg" style="text-align:left; font-weight:bold">
                    <span>@successMsg</span>
                </div>


            </RadzenTabsItem>

        }

    </Tabs>
    </RadzenTabs>


@code {

    [Parameter]
    public int StoreId { get; set; }

    public StoreData store { get; set; }
    private List<string> registeredUsers;
    private Dictionary<string, string> staff;
    private List<KeyValuePair<string, string>> staffList;
    private string[] roles = new string[] { "Manager", "Owner" };
    private string[] options = new string[] { "Promote", "Demote" };
    private string loggedInUser;
    public string AppointmentMessage { get; set; }
    private List<Tuple<ProductData, int>> inventory { get; set; }
    private List<KeyValuePair<int, string>> discounts;
    private List<KeyValuePair<int, string>> policies;
    private int selectedProductId;
    private int delta;
    private string errorMsg { get; set; }
    private string successMsg { get; set; }
    private string selectedUser;
    private string selectedRole;
    private string selectedOption;
    List<string> discountsWithId = new List<string>();
    List<string> policiesWithId = new List<string>();
    List<string> products = new List<string>();
    List<string> currentDiscounts = new List<string>();
    private string discountText { get; set; }
    private string policyText { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        GetAllRegisteredUsersResponse response = await service.GetAllActiveUsers();
        registeredUsers = response.Users;
        loggedInUser = await ((MyAuthenticationStateProvider)AuthenticationStateProvider).GetLoggedInUsername();
        staff = await service.GetStaff(StoreId);
        staffList = staff.ToList();

        Dictionary<int, string> discountsDict = await service.GetRawDiscounts();
        SortedDictionary<int, string> sortedDiscounts = new SortedDictionary<int, string>(discountsDict);
        discounts = sortedDiscounts.ToList();
        foreach (KeyValuePair<int, string> kv in discounts)
            discountsWithId.Add(kv.Key + ": " + kv.Value);

        Dictionary<int, string> purchasePoliciesDict = await service.GetRawPurchasePolcies();
        SortedDictionary<int, string> sortedPolicies = new SortedDictionary<int, string>(purchasePoliciesDict);
        policies = purchasePoliciesDict.ToList();
        foreach (KeyValuePair<int, string> kv in policies)
            policiesWithId.Add(kv.Key + ": " + kv.Value);

        await UpdateInventory();
        ProductsInEdit = new List<Tuple<ProductData, int>>();

        await UpdateManagersPermissions();
        PermissionsInEdit = new List<Tuple<string, Permission>>();

        foreach (Tuple<ProductData, int> tuple in inventory)
            products.Add(tuple.Item1.ProductId + ": " + tuple.Item1.Name);
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string ProductDetails { get; set; }
        public double ProductPrice { get; set; }
        public string ProductName { get; set; }
        public string ProductCategory { get; set; }
        public int Pamount { get; set; }
        public string ImgUrl { get; set; }
    }

    Product product = new Product()
    {

    };

    private async void AddProduct(Product p)
    {
        SuccessFailResponse response = await service.AddProductToStore(StoreId, loggedInUser, p.ProductId, p.ProductDetails, p.ProductPrice, p.ProductName, p.ProductCategory, p.Pamount, p.ImgUrl);

        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }
    }

    void Cancel()
    {
        //
    }

    async private void ParseDiscountText(object args)
    {
        SuccessFailResponse response = await service.UpdateDiscountPolicy(StoreId, loggedInUser, discountText);

        if (response.Success)
        {
            successMsg = "Discount added successfully";
            errorMsg = "";
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }
    }
    async private void ParsePolicyText(object args)
    {
        SuccessFailResponse response = await service.UpdatePurchasePolicy(StoreId, loggedInUser, policyText);

        if (response.Success)
        {
            successMsg = "Policy added successfully";
            errorMsg = "";
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }
    }



    private void ChnageDiscountText(object discount)
    {
        discountText = (string)discount;
        bool balancedParen = CheckForBalancedBracketing(discountText);
        if (!balancedParen)
        {
            errorMsg = "Expression is not balanced";
            successMsg = "";
        }

        else
        {
            errorMsg = "";
            successMsg = "Expression is well balanced";
        }
    }
    private void ChangePolicyText(object policy)
    {
        policyText = (string)policy;
        bool balancedParen = CheckForBalancedBracketing(policyText);
        if (!balancedParen)
        {
            errorMsg = "Expression is not balanced";
            successMsg = "";
        }

        else
        {
            errorMsg = "";
            successMsg = "Expression is well balanced";
        }
    }


    private void SelectProduct(object productId)
    {
        selectedProductId = (int)productId;
    }

    private void ChangeDelta(object Delta)
    {
        delta = (int)Delta;
    }

    private async void DeleteProduct()
    {
        SuccessFailResponse response =  await service.RemoveProductFromStore(StoreId, loggedInUser, selectedProductId);

        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }
    }

    private async Task Increase()
    {
        SuccessFailResponse response = await service.IncreaseProductAmount(StoreId, loggedInUser, selectedProductId, delta);

        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }

        await UpdateInventory();
    }

    private async Task Decrease()
    {
        SuccessFailResponse response = await service.DecreaseProductAmount(StoreId, loggedInUser, selectedProductId, delta);

        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }

        await UpdateInventory();
    }


    private async void ApplyAction()
    {

        Tuple<bool, string> successErrorTuple = new Tuple<bool, string>(false, "default error");

        if (selectedOption == "Promote" && selectedRole == "Owner")
            successErrorTuple = await service.AppointOwner(loggedInUser, selectedUser, StoreId);


        if (selectedOption == "Promote" && selectedRole == "Manager")
            successErrorTuple = await service.AppointManager(loggedInUser, selectedUser, StoreId);

        if (selectedOption == "Demote" && selectedRole == "Owner")
            successErrorTuple = await service.DemoteOwner(loggedInUser, selectedUser, StoreId);

        if (selectedOption == "Demote" && selectedRole == "Manager")
            successErrorTuple = await service.DemoteOwner(loggedInUser, selectedUser, StoreId);


        if (successErrorTuple.Item1)
            AppointmentMessage = "Operation applied successfully";

        else
            AppointmentMessage = successErrorTuple.Item2; // the error

    }

    private void OnSelected1(string selection)
    {
        selectedOption = selection;
    }

    private void OnSelected2(string selection)
    {
        selectedUser = selection;
    }

    private void OnSelected3(string selection)
    {
        selectedRole = selection;
    }


    ///////////////////////////////////////////////////////////// Products GridView

    public RadzenGrid<Tuple<ProductData, int>> productsGrid { get; set; }
    public List<Tuple<ProductData, int>> ProductsInEdit { get; set; }


    void EditRow(Tuple<ProductData, int> product)
    {
        productsGrid.EditRow(product);
        ProductsInEdit.Add(product);
    }

    async void SaveRow(Tuple<ProductData, int> product)
    {
        UpdateProductOfStoreRequest request = new UpdateProductOfStoreRequest(loggedInUser, StoreId, product.Item1.ProductId, product.Item1.Details,
        product.Item1.Price, product.Item1.Name, product.Item1.Category, "");
        SuccessFailResponse response = await service.GetResponse<UpdateProductOfStoreRequest, SuccessFailResponse>(request);
        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
            await productsGrid.UpdateRow(product);
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }

    }

    void Change(object value)
    {
        // nothing for now
    }

    async void CancelEdit(Tuple<ProductData, int> product)
    {
        productsGrid.CancelEditRow(product);
        await UpdateInventory();
    }

    async Task UpdateInventory()
    {
        InventoryData invData = await service.GetStoresInventory(StoreId);
        inventory = invData.invProducts;
    }

    async void DeleteRow(Tuple<ProductData, int> product)
    {
        SuccessFailResponse response = await service.RemoveProductFromStore(StoreId, loggedInUser, product.Item1.ProductId);

        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
            inventory.Remove(product);
            productsGrid.Reload();
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }
    }

    ///////////////////////////////////////////////////////////// Permissions GridView

    public RadzenGrid<Tuple<string, Permission>> permissionsGrid { get; set; }
    public List<Tuple<string, Permission>> PermissionsInEdit { get; set; }
    public List<Tuple<string, Permission>> ManagersPermissions { get; set; }



    void EditRow_Permission(Tuple<string, Permission> permission)
    {
        permissionsGrid.EditRow(permission);
        PermissionsInEdit.Add(permission);
    }

    async void SaveRow_Permission(Tuple<string, Permission> permission)
    {
        ChangePermissionsRequest req = new ChangePermissionsRequest(loggedInUser, permission.Item1, StoreId, permission.Item2);
        SuccessFailResponse response = await service.GetResponse<ChangePermissionsRequest, SuccessFailResponse>(req);
        if (response.Success)
        {
            successMsg = "Operation completed successfully";
            errorMsg = "";
            await permissionsGrid.UpdateRow(permission);
        }
        else
        {
            successMsg = "";
            errorMsg = response.Error;
        }

    }

    async void CancelEdit_Permission(Tuple<string, Permission> permission)
    {
        permissionsGrid.CancelEditRow(permission);
        await UpdateManagersPermissions();
    }

    async Task UpdateManagersPermissions()
    {
        GetManagersPermissionRequest req = new GetManagersPermissionRequest(StoreId, loggedInUser);
        GetManagerPermissionResponse response = await service.GetResponse<GetManagersPermissionRequest, GetManagerPermissionResponse>(req);
        ManagersPermissions = response.ManagerPermissions;
    }

    private bool CheckForBalancedBracketing(string IncomingString)
    {
        const char LeftParenthesis = '(';
        const char RightParenthesis = ')';
        uint BracketCount = 0;

        try
        {
            checked  // Turns on overflow checking.
            {
                for (int Index = 0; Index < IncomingString.Length; Index++)
                {
                    switch (IncomingString[Index])
                    {
                        case LeftParenthesis:
                            BracketCount++;
                            continue;
                        case RightParenthesis:
                            BracketCount--;
                            continue;
                        default:
                            continue;
                    }  // end of switch()

                }
            }
        }

        catch (OverflowException)
        {
            return false;
        }

        if (BracketCount == 0)
        {
            return true;
        }

        return false;

    }  // end of CheckForBalancedBracketing()

}
